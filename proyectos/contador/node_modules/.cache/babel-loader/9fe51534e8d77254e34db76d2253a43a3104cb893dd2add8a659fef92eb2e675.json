{"ast":null,"code":"var _jsxFileName = \"/Users/ivan/Documents/formacionReact/proyectos/contador/src/Contador.js\";\nimport './Contador.css';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n/*\nfunction App() {    // render (JSX)\n  return (\n    <div>\n      Hola, soy el contador\n    </div>\n  );\n}\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Contador extends React.Component {\n  // Aquí podemos definir: \n  // - Nuestras propias funciones... con nuestra lógica\n  // - Sobreescribir (override) de las funciones que vienen definidas en React.Component\n\n  constructor(props) {\n    super(props); // Dentro eso hace this.props=props\n    console.log(\"Componente creado: \", props);\n    // La variable de instancia this.state es muy especial. Por qué? \n    // Si la cambio, se renderiza el componente... eso es cierto? NO\n    // Cuando llamamos a this.setState():\n    // - Por un lado, se cambia el valor al que apunta this.state... o no, depende lo que pase yo ahi\n    // - Por otro lado, dentro de setState, se Mira si le hemos pasado otra cosa.... y se la hemos pasado... entonces es cuando se llama a render()\n    this.state = {\n      \"cuenta\": 0\n    };\n    this.propietario = \"Ivan\";\n  }\n  componentDidMount() {\n    // Me llaman a esta función cuando el componente ha sido pinchado en el DOM\n    console.log(\"Componente montado:\");\n    // Aqui va a estar la magia\n  }\n\n  componentWillUnmount() {\n    // Me llaman a esta función cuando el componente se desmonta\n    console.log(\"Componente desmontado\");\n  }\n  comenzarContar() {\n    // setTimeout( funcion, delay ) Deja una tarea programada para ejecutarse asincronamente con un retraso\n    // setInterval( funcion, sleep ) Deja una tarea programada pàra ejecutarse asincronamente cada x tiempo\n    this.referenciaFuncionProgramada = setInterval(() => {\n      this.state.cuenta++;\n      this.setState(this.state);\n    }, 500);\n  }\n  paraDeContar() {\n    clearInterval(this.referenciaFuncionProgramada);\n  }\n  render() {\n    console.log(\"Componente renderizado:\");\n    // Escribo JSX\n    var resultado = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Hola, soy el contador \", this.props.nombre, \" de \", this.propietario, \" y voy por el n\\xFAmero \", this.state.cuenta, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.comenzarContar.bind(this),\n        children: \"Comenzar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.comenzarContar(),\n        children: \"Comenzar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n    return resultado;\n  }\n}\n\n// Atributos de la marca HTML\nContador.propTypes = {\n  nombre: PropTypes.string //.isRequired\n};\n\nexport default Contador;","map":{"version":3,"names":["React","PropTypes","jsxDEV","_jsxDEV","Contador","Component","constructor","props","console","log","state","propietario","componentDidMount","componentWillUnmount","comenzarContar","referenciaFuncionProgramada","setInterval","cuenta","setState","paraDeContar","clearInterval","render","resultado","children","nombre","onClick","bind","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","string"],"sources":["/Users/ivan/Documents/formacionReact/proyectos/contador/src/Contador.js"],"sourcesContent":["import './Contador.css';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n/*\nfunction App() {    // render (JSX)\n  return (\n    <div>\n      Hola, soy el contador\n    </div>\n  );\n}\n*/\nclass Contador extends React.Component{\n\n  // Aquí podemos definir: \n  // - Nuestras propias funciones... con nuestra lógica\n  // - Sobreescribir (override) de las funciones que vienen definidas en React.Component\n\n  constructor(props){\n    super(props) // Dentro eso hace this.props=props\n    console.log(\"Componente creado: \", props)\n    // La variable de instancia this.state es muy especial. Por qué? \n    // Si la cambio, se renderiza el componente... eso es cierto? NO\n    // Cuando llamamos a this.setState():\n    // - Por un lado, se cambia el valor al que apunta this.state... o no, depende lo que pase yo ahi\n    // - Por otro lado, dentro de setState, se Mira si le hemos pasado otra cosa.... y se la hemos pasado... entonces es cuando se llama a render()\n    this.state= { \"cuenta\": 0 } \n    this.propietario = \"Ivan\"\n  }\n\n  componentDidMount(){\n    // Me llaman a esta función cuando el componente ha sido pinchado en el DOM\n    console.log(\"Componente montado:\")\n    // Aqui va a estar la magia\n  }\n  componentWillUnmount(){\n    // Me llaman a esta función cuando el componente se desmonta\n    console.log(\"Componente desmontado\")\n  }\n\n  comenzarContar() {\n    \n    // setTimeout( funcion, delay ) Deja una tarea programada para ejecutarse asincronamente con un retraso\n    // setInterval( funcion, sleep ) Deja una tarea programada pàra ejecutarse asincronamente cada x tiempo\n    this.referenciaFuncionProgramada= setInterval( () => { this.state.cuenta++; this.setState(this.state)}  , 500 )\n  \n  }\n\n  paraDeContar() {\n    \n    clearInterval(this.referenciaFuncionProgramada)\n  \n  }\n\n  render() {\n    console.log(\"Componente renderizado:\")\n           // Escribo JSX\n    var resultado =  (\n      <div>\n        Hola, soy el contador { this.props.nombre } de { this.propietario } y voy por el número { this.state.cuenta }\n        <button onClick={ this.comenzarContar.bind(this) } >Comenzar</button>\n        <button onClick={ () => this.comenzarContar() } >Comenzar</button>\n      </div>\n    );\n    return resultado;\n  }\n}\n\n// Atributos de la marca HTML\nContador.propTypes = {\n  nombre: PropTypes.string //.isRequired\n}\nexport default Contador;\n"],"mappings":";AAAA,OAAO,gBAAgB;AACvB,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,QAAQ,SAASJ,KAAK,CAACK,SAAS;EAEpC;EACA;EACA;;EAEAC,WAAWA,CAACC,KAAK,EAAC;IAChB,KAAK,CAACA,KAAK,CAAC,EAAC;IACbC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,KAAK,CAAC;IACzC;IACA;IACA;IACA;IACA;IACA,IAAI,CAACG,KAAK,GAAE;MAAE,QAAQ,EAAE;IAAE,CAAC;IAC3B,IAAI,CAACC,WAAW,GAAG,MAAM;EAC3B;EAEAC,iBAAiBA,CAAA,EAAE;IACjB;IACAJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC;EACF;;EACAI,oBAAoBA,CAAA,EAAE;IACpB;IACAL,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACtC;EAEAK,cAAcA,CAAA,EAAG;IAEf;IACA;IACA,IAAI,CAACC,2BAA2B,GAAEC,WAAW,CAAE,MAAM;MAAE,IAAI,CAACN,KAAK,CAACO,MAAM,EAAE;MAAE,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACR,KAAK,CAAC;IAAA,CAAC,EAAI,GAAI,CAAC;EAEjH;EAEAS,YAAYA,CAAA,EAAG;IAEbC,aAAa,CAAC,IAAI,CAACL,2BAA2B,CAAC;EAEjD;EAEAM,MAAMA,CAAA,EAAG;IACPb,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IAC/B;IACP,IAAIa,SAAS,gBACXnB,OAAA;MAAAoB,QAAA,GAAK,wBACmB,EAAE,IAAI,CAAChB,KAAK,CAACiB,MAAM,EAAE,MAAI,EAAE,IAAI,CAACb,WAAW,EAAE,0BAAqB,EAAE,IAAI,CAACD,KAAK,CAACO,MAAM,eAC3Gd,OAAA;QAAQsB,OAAO,EAAG,IAAI,CAACX,cAAc,CAACY,IAAI,CAAC,IAAI,CAAG;QAAAH,QAAA,EAAE;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrE3B,OAAA;QAAQsB,OAAO,EAAGA,CAAA,KAAM,IAAI,CAACX,cAAc,CAAC,CAAG;QAAAS,QAAA,EAAE;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CACN;IACD,OAAOR,SAAS;EAClB;AACF;;AAEA;AACAlB,QAAQ,CAAC2B,SAAS,GAAG;EACnBP,MAAM,EAAEvB,SAAS,CAAC+B,MAAM,CAAC;AAC3B,CAAC;;AACD,eAAe5B,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}